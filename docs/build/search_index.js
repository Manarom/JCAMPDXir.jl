var documenterSearchIndex = {"docs":
[{"location":"pluto_tests_git/","page":"-","title":"-","text":"\n<p>The static version of <b>PlanckFunctions.jl</b> Pluto notebook is available at :<a href=\"../planck_test_git.html\">planck_test_git.html</a>\n.</p","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"Notebook file with PlanckFunctions.jl usage examples are available at Pluto notebooks.","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"To run these notebooks, you need:","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"Install julia language itself from its official download page \nInstall Pluto notebook from julia REPL by entering the following commands line-by-line:","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"import Pkg\nPkg.add(\"Pluto\")\nusing Pluto\nPluto.run()","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"The last line will launch the Pluto starting page in your default browser ","category":"page"},{"location":"pluto_tests_git/","page":"-","title":"-","text":"Copy/Clone the entire GitHub repository to your local folder. As far as PlanckFunctions.jl is not a registered package, all files needed to run the notebooks must be in the ../src folder with respect to  note_book_name.jl file location.\nOpen notebook's .jl- file in Pluto by providing the full path to the \"Open a notebook\" text field on Pluto's starting page. As far as Pluto has its own package manager, it will automatically install all necessary dependancies, which are marked in using cell of this file. ","category":"page"},{"location":"JCAMPDXir/#Functions-of-JCAMPDXir","page":"JCAMPDXir","title":"Functions of JCAMPDXir","text":"","category":"section"},{"location":"JCAMPDXir/#JCAMPDXir.JCAMPDXir","page":"JCAMPDXir","title":"JCAMPDXir.JCAMPDXir","text":"This JCAMP-DX (infrared) file format was developed for the exchange of infrared spectra between different laboratories. General descripton of JCAMP-DX infrared format can be found in [https://iupac.org/wp-content/uploads/2021/08/JCAMP-DX_IR_1988.pdf] In addition to the spectra themselves, the file also stores metadata containing information about the units of measurement and the conditions under which the spectra were acquired. A detailed specification of the format is provided via the link.  This package was written for a specific task and cannot be considered as a complete implementation of all JCAMP-DX format specification;  however, it implements some of the basic functionality to read read_jdx_file and write write_jdx_file JCAMP-DX files according to the JCAMP-DX=4.24.\n\nJCAMP file content example: \n\n        ##TITLE=1 \n        ##JCAMP-DX=4.24\n        ##DATATYPE=INFRARED SPECTRUM\n        ##DATE=2021/10/17\n        ##TIME=11:30\n        ##XUNITS=1/CM\n        ##YUNITS=TRANSMITTANCE\n        ##XFACTOR=1\n        ##YFACTOR=0.00699183\n        ##FIRSTX=0\n        ##LASTX=15801.4671743\n        ##FIRSTY=11746.3412893072\n        ##MAXX=15801.4671743\n        ##MINX=0\n        ##MAXY=3.75371e+006\n        ##MINY=4040.25\n        ##NPOINTS=16384\n        ##XYDATA=(X++(Y..Y))\n        0 1680010 821286 2148133 1505245 1537124 1367661 1147725 1134981\n        7.71603 1166853 1213186 1029828 1067595 1135904 1195128 1157134 1150556\n        15.4321 1266743 1164401 1014224 1022338 999780 1138781 1208950 1161258\n        .\n        .\n        ##END\n\n\n\n\n\n","category":"module"},{"location":"JCAMPDXir/#JCAMPDXir.convert!-Union{Tuple{T}, Tuple{AbstractArray, JCAMPDXir.sUnits{T}, JCAMPDXir.sUnits{T}}} where T","page":"JCAMPDXir","title":"JCAMPDXir.convert!","text":"convert!(x::AbstractArray,::sUnits{T},::sUnits{T}) where T\n\nThis functions can be used convert y and x units \n\nsupported x-units names: NANOMETERS,NM,MKM,MICROMETERS,1/CM\n\nsupported y-units names: ABSORBANCE,A,T,A.U.,TRANSMITTANCE,R,KUBELKA-MUNK,ARBITRARY UNITS,REFLECTANCE\n\nExample\n\njulia> convert!([1,2,3],xUnits(\"MKM\"),xUnits(\"1/cm\"))) \n\n\n\n\n\n","category":"method"},{"location":"JCAMPDXir/#JCAMPDXir.parse_headers-Tuple{String}","page":"JCAMPDXir","title":"JCAMPDXir.parse_headers","text":"parse_headers(file::String)\n\nParses headers from JCAMP-DX file\n\n\n\n\n\n","category":"method"},{"location":"JCAMPDXir/#JCAMPDXir.read!-Tuple{JDXfile}","page":"JCAMPDXir","title":"JCAMPDXir.read!","text":"read!(jdx::JDXfile)\n\nfills precreated JDXfile object\n\n\n\n\n\n","category":"method"},{"location":"JCAMPDXir/#JCAMPDXir.read_jdx_file-Tuple{String}","page":"JCAMPDXir","title":"JCAMPDXir.read_jdx_file","text":"read_jdx_file(file_name::String)\n\nRead JCAMP format file file_name - full file name,\nInput: \n    file_name - full file name\nreturns named tuple with fields :\n       x - coordinate (wavelength, wavenumber or other)\n       y - data\n       headers - dictionary in \"String => value\" format with \n       headers values\n\n\n\n\n\n","category":"method"},{"location":"JCAMPDXir/#JCAMPDXir.write_jdx_file","page":"JCAMPDXir","title":"JCAMPDXir.write_jdx_file","text":"write_jdx_file(file_name,x::Vector{Float64},y::Vector{Float64},x_units::String=\"1/CM\",\n    y_units::String=\"TRANSMITTANCE\"; kwargs...)\n\nSaves infrared spectrum given as two vectors x and y to JCAMP-DX file file_name. Input vector should be of the same size. Currently the package suppots only (X++(Y..Y)) table data format. JCAMP-DX 4.24 demands 80 symbols per file line of Y-data and 88 total symbols per line. The y-vector is stored in eight columns, thus the total number of points should be a multiple of eight. All last mod(length(y),8) points of y dtaa will not be written to the file. It is preferable that all x-data is sorted in ascending order and spaced uniformly. If it is not the case, or if the units conversion  is envolved, function will automatically interpolate and sort the data on uniformly spaced grid.\n\nx_units  - units of x data, must be one of  NANOMETERS,NM,MKM,MICROMETERS,1/CM\n\ny_units - units of y data, must be one of ABSORBANCE,A,T,A.U.,TRANSMITTANCE,R,KUBELKA-MUNK,ARBITRARY UNITS,REFLECTANCE \n\nFurther any keword arguments can be provided, all of them will be written to the head of the file. All keyword arguments appear in the file in uppercase.\n\nMost impostant are \n\nTITLE - the title of the file (it is always on top of the file)\nXUNITS - x data units saved to file,  must be one of  NANOMETERS,NM,MKM,MICROMETERS,1/CM\nYUNITS - y data units saved to file, must be one of ABSORBANCE,A,T,A.U.,TRANSMITTANCE,R,KUBELKA-MUNK,ARBITRARY UNITS,REFLECTANCE\n\nIf x_units are not equal to the key-word argument XUNITS than the function converts x-values before saving to file see xconvert!\n\nIf y_units are not equal to the key-word argument XUNITS than the function converts y-values before saving to file see yconvert!\n\nExample\n\njulia> using JCAMPDXir\njulia> filename = joinpath(@__DIR__,\"test.jdx\")\njulia> write_jdx_file(filename,[1,2,3,4,5,6,7,8],rand(8),\"MKM\",\"T\",title = \"new file\",XUNIT=\"1/CM\",YUNITS=\"KUBELKA-MUNK\") \n\n\n\n\n\n\n","category":"function"},{"location":"JCAMPDXir/#JCAMPDXir.xconvert!-Tuple{AbstractArray, String, String}","page":"JCAMPDXir","title":"JCAMPDXir.xconvert!","text":"xconvert!(x::AbstractArray,input_units::String,output_units::String)\n\nConverts the values of `x` from `input_units` to `output_units`.\nsupported x-units names: NANOMETERS,NM,MKM,MICROMETERS,1/CM\n\nExample\n\njulia> xconvert!([1,2,3],\"MKM\",xUnits\"1/cm\")) \n\n\n\n\n\n","category":"method"},{"location":"JCAMPDXir/#JCAMPDXir.yconvert!-Tuple{AbstractArray, String, String}","page":"JCAMPDXir","title":"JCAMPDXir.yconvert!","text":"yconvert!(y::AbstractArray,input_units::String,output_units::String)\n\nConverts the values of `y` from `input_units` to `output_units`.\nsupported x-units names: NANOMETERS,NM,MKM,MICROMETERS,1/CM\nAll units can be written both in lower- and in uppercase, `T`,`R` and `A` stay for \na shorthand for `TRANSMITTANCE`,`REFLECTANCE` and `ABSORBANCE`\n\nExample\n\njulia> yconvert!([1,2,3],\"R\",\"KUBELKA-MUNK\")) \n\n\n\n\n\n","category":"method"},{"location":"#JCAMPDXir.jl","page":"Home","title":"JCAMPDXir.jl","text":"","category":"section"},{"location":"#General-description","page":"Home","title":"General description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This small package is designed to read and write the infrared spectra from/to files written JCAMP-DX format (common file extention is \".jdx\"). JCAMP-DX (infrared) file format was developed for the exchange of infrared spectra between different laboratories. General descripton of JCAMP-DX infrared format can be found in  JCAMP-DX for infrared 4.24 In addition to the spectra themselves, the file also stores metadata containing information about the units of measurement and the conditions under which the spectra were acquired. A detailed specification of the format is provided via the link.  This package was written for a specific task and cannot be considered as a complete implementation of all JCAMP-DX format specification;  however, it implements some of the basic functionality to read  and write JCAMP-DX files according to the JCAMP-DX=4.24.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To contact me, please do it through the GitHub repository.","category":"page"}]
}
